name: wipac ci/cd

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.5


  #############################################################################
  # IMAGE BUILDS
  #############################################################################

  keycloak-image-build:
    runs-on: ubuntu-latest
    outputs:
      keycloak-tag: ${{ steps.docker_meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/WIPACRepo/keycloak-rest-services
          tags: |
            type=ref,prefix=test-keycloak-,event=branch
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: resources/keycloak-image/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  ldap-image-build:
    runs-on: ubuntu-latest
    outputs:
      ldap-tag: ${{ steps.docker_meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/WIPACRepo/keycloak-rest-services
          tags: |
            type=ref,prefix=test-ldap-,event=branch
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: resources/ldap-image/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}


  #############################################################################
  # LINTERS
  #############################################################################

  flake8:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.2
        with:
          max-complexity: 28  # ideal is ~10-15


  #############################################################################
  # PACKAGING
  #############################################################################

  py-setup:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: WIPACrepo/wipac-dev-py-setup-action@v4.3
        with:
          python_min: 3.9
          pypi_name: wipac-keycloak-rest-services
          package_dirs: krs
          author: WIPAC Developers
          author_email: developers@icecube.wisc.edu
          keywords: "WIPAC, rest tools, utilities"

  py-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: krs:py-dep-this
          load: true
      - uses: WIPACrepo/wipac-dev-py-dependencies-action@v2.2
        with:
          dockerfile_ignore_paths: "resources/keycloak-image/Dockerfile, resources/ldap-image/Dockerfile"


  #############################################################################
  # TESTS
  #############################################################################

  pip-install:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - run: |
          set -euo pipefail
          pip install --upgrade pip wheel setuptools
          pip install .[actions]

  py-tests:
    needs: [ keycloak-image-build, ldap-image-build, py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [ "actions", "krs" ]
    services:
      rabbitmq:
        image: bitnami/rabbitmq:3.8
        env:
          RABBITMQ_USERNAME: admin
          RABBITMQ_PASSWORD: admin
          RABBITMQ_VHOST: keycloak
          RABBITMQ_NODE_NAME: rabbit@rabbitmq
        options: --health-cmd "rabbitmqctl node_health_check" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
      ldap:
        image: ${{ needs.ldap-image-build.outputs.ldap-tag }}
        ports:
          - 1389:1389
      keycloak:
        image: ${{ needs.keycloak-image-build.outputs.keycloak-tag }}
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
          KK_TO_RMQ_URL: rabbitmq
          CMD: start-dev
        ports:
          - 8080:8080
    container:
      image: python:${{ fromJSON(needs.py-versions.outputs.matrix)[0] }}
      env:
        KEYCLOAK_URL: http://keycloak:8080
        KEYCLOAK_USERNAME: admin
        KEYCLOAK_PASSWORD: admin
        LDAP_URL: ldap://ldap:1389
        LDAP_ADMIN_USER: "cn=admin,dc=icecube,dc=wisc,dc=edu"
        LDAP_ADMIN_PASSWORD: admin
        RABBITMQ_MGMT_URL: http://rabbitmq:15672
        RABBITMQ_URL: amqp://admin:admin@rabbitmq/keycloak
    steps:
      - uses: actions/checkout@v4
      - run: |
          set -euo pipefail
          pip install --upgrade pip wheel setuptools
          pip install .[tests,actions]
        shell: bash
      - run: |
          set -euo pipefail
          python -m pytest tests/${{ matrix.test }} --tb=short --log-level=DEBUG
        shell: bash


  #############################################################################
  # RELEASE
  #############################################################################

  release:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    needs: [ py-setup, py-dependencies, flake8, pip-install, py-tests ]
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write
      packages: write
    steps:
      # Note: we need to checkout the repository at the workflow sha in case during the workflow
      # the branch was updated. To keep PSR working with the configured release branches,
      # we force a checkout of the desired release branch but at the workflow sha HEAD.
      - name: Setup | Checkout Repository at workflow sha
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Setup | Force correct release branch on workflow sha
        run: |
          set -euo pipefail
          git checkout -B ${{ github.ref_name }} ${{ github.sha }}

      - name: Action | Semantic Version Release
        id: release
        # Adjust tag with desired version if applicable.
        uses: python-semantic-release/python-semantic-release@v9.16.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

      - name: PyPI Release
        uses: pypa/gh-action-pypi-publish@v1.8.14
        if: steps.release.outputs.released == 'true'
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v9.16.1
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

  docker:
    name: "Docker Image"
    needs: [ py-setup, py-dependencies, flake8, pip-install, py-tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            wipac/keycloak-rest-services
            ghcr.io/WIPACRepo/keycloak-rest-services
          tags: |
            type=ref,event=branch
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
